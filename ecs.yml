AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  SubnetID:
    Type: String
  ServiceName:
    Type: String
  ServiceVersion:
    Type: String
  DockerHubUsername:
    Type: String
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: deployment-example-cluster
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ServiceSecurityGroup
      GroupDescription: Security group for service
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ServiceName}-task
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Sub ${ServiceName}-container
          Image: !Sub docker.io/${DockerHubUsername}/${ServiceName}:${ServiceVersion}
          PortMappings:
            - ContainerPort: 8080
      RequiresCompatibilities:
        - EC2
        - FARGATE
  PortalELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets:
        - Ref: !Ref SubnetID1
        - Ref: !Ref SubnetID2
      Listeners:
        - LoadBalancerPort: '8080'
          InstancePort: '8080'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:8080/rent'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - Ref: ServiceSecurityGroup.GroupId
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ServiceName}-service
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ServiceSecurityGroup.GroupId
    LoadBalancers:
      - ContainerName: portal-service
        ContainerPort: 8080
        LoadBalancerName:
          Ref: PortalELB
  Route53:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub ${HostedZone}
      RecordSets:
        - Name:
            Fn::Join:
              - ''
              - - "backend."
                - !Sub ${HostedZone}
          Type: 'A'
          AliasTarget:
            HostedZoneId:
              - !GetAtt PortalELB.CanonicalHostedZoneNameID
            DNSName:
              - !GetAtt PortalELB.DNSName